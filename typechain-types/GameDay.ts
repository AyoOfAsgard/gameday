/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace GameDay {
  export type GameStruct = {
    creator: AddressLike;
    joiner: AddressLike;
    betAmount: BigNumberish;
    isActive: boolean;
    winner: AddressLike;
  };

  export type GameStructOutput = [
    creator: string,
    joiner: string,
    betAmount: bigint,
    isActive: boolean,
    winner: string
  ] & {
    creator: string;
    joiner: string;
    betAmount: bigint;
    isActive: boolean;
    winner: string;
  };
}

export interface GameDayInterface extends Interface {
  getFunction(
    nameOrSignature: "createGame" | "endGame" | "games" | "getGame" | "joinGame"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "GameCreated" | "GameEnded" | "PlayerJoined"
  ): EventFragment;

  encodeFunctionData(functionFragment: "createGame", values: [string]): string;
  encodeFunctionData(
    functionFragment: "endGame",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "games", values: [string]): string;
  encodeFunctionData(functionFragment: "getGame", values: [string]): string;
  encodeFunctionData(functionFragment: "joinGame", values: [string]): string;

  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
}

export namespace GameCreatedEvent {
  export type InputTuple = [
    gameId: string,
    creator: AddressLike,
    betAmount: BigNumberish
  ];
  export type OutputTuple = [
    gameId: string,
    creator: string,
    betAmount: bigint
  ];
  export interface OutputObject {
    gameId: string;
    creator: string;
    betAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [
    gameId: string,
    winner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [gameId: string, winner: string, amount: bigint];
  export interface OutputObject {
    gameId: string;
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [gameId: string, joiner: AddressLike];
  export type OutputTuple = [gameId: string, joiner: string];
  export interface OutputObject {
    gameId: string;
    joiner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameDay extends BaseContract {
  connect(runner?: ContractRunner | null): GameDay;
  waitForDeployment(): Promise<this>;

  interface: GameDayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createGame: TypedContractMethod<[gameId: string], [void], "payable">;

  endGame: TypedContractMethod<
    [gameId: string, winner: AddressLike],
    [void],
    "nonpayable"
  >;

  games: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, boolean, string] & {
        creator: string;
        joiner: string;
        betAmount: bigint;
        isActive: boolean;
        winner: string;
      }
    ],
    "view"
  >;

  getGame: TypedContractMethod<
    [gameId: string],
    [GameDay.GameStructOutput],
    "view"
  >;

  joinGame: TypedContractMethod<[gameId: string], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<[gameId: string], [void], "payable">;
  getFunction(
    nameOrSignature: "endGame"
  ): TypedContractMethod<
    [gameId: string, winner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, boolean, string] & {
        creator: string;
        joiner: string;
        betAmount: bigint;
        isActive: boolean;
        winner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGame"
  ): TypedContractMethod<[gameId: string], [GameDay.GameStructOutput], "view">;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<[gameId: string], [void], "payable">;

  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;

  filters: {
    "GameCreated(string,address,uint256)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "GameEnded(string,address,uint256)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;

    "PlayerJoined(string,address)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
  };
}
